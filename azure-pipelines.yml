trigger:
  branches:
    include:
      - master
      - develop

pr: none

variables:
  vmImageName: "ubuntu-latest"
  branchName: variables["Build.SourceBranchName"]
  awsCredentials: "s3-learn.plantanapp.com"
  artifactFolderName: "doc"
  isDev:  $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
  isProd:  $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: "20.x"

          - task: Npm@1
            displayName: Install packages
            inputs:
              command: "install"

          - task: Npm@1
            displayName: Build docusaurus
            inputs:
              command: "custom"
              customCommand: "run build"

          - task: CopyFiles@2
            displayName: Copy docusaurus files to $(Build.ArtifactStagingDirectory)
            inputs:
              SourceFolder: "build/"
              Contents: "**"
              TargetFolder: $(Build.ArtifactStagingDirectory)

          - task: PublishBuildArtifacts@1
            displayName: Publish build artifacts to $(artifactFolderName)
            inputs:
              PathtoPublish: $(Build.ArtifactStagingDirectory)
              ArtifactName: $(artifactFolderName)
              publishLocation: "Container"

  - stage: DevDeploy
    displayName: Deploy to Dev S3
    dependsOn: Build
    condition: and(succeeded(), eq(variables.isDev, true))
    jobs:
      - deployment: DeployArtifactsToS3
        displayName: Deploy artifacts to S3
        pool:
          vmImage: $(vmImageName)
        environment:
          name: 'docs'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AmazonWebServices.aws-vsts-tools.S3Upload.S3Upload@1
                  displayName: Upload artifacts to learn-dev.plantanapp.com S3
                  inputs:
                    awsCredentials: $(awsCredentials)
                    regionName: "us-east-1"
                    bucketName: "learn-dev.plantanapp.com"
                    sourceFolder: "$(Pipeline.Workspace)/$(artifactFolderName)/"
                    globExpressions: "**"

                - task: AWSCLI@1
                  displayName: Invalidate CloudFront Cache
                  inputs:
                    awsCredentials: $(awsCredentials)
                    regionName: "us-east-1"
                    awsCommand: "cloudfront"
                    awsSubCommand: "create-invalidation"
                    awsArguments: '--distribution-id $(DistributionId) --paths "/*"'

  - stage: ProdDeploy
    displayName: Deploy to Prod S3
    dependsOn: Build
    condition: and(succeeded(), eq(variables.isProd, true)) 
    jobs:
      - deployment: DeployArtifactsToS3
        displayName: Deploy artifacts to S3
        pool:
          vmImage: $(vmImageName)
        environment:
          name: 'docs'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AmazonWebServices.aws-vsts-tools.S3Upload.S3Upload@1
                  displayName: Upload artifacts to learn.plantanapp.com S3
                  inputs:
                    awsCredentials: $(awsCredentials)
                    regionName: "us-east-1"
                    bucketName: "learn.plantanapp.com"
                    sourceFolder: "$(Pipeline.Workspace)/$(artifactFolderName)/"
                    globExpressions: "**"

                - task: AWSCLI@1
                  displayName: Invalidate CloudFront Cache
                  inputs:
                    awsCredentials: $(awsCredentials)
                    regionName: "us-east-1"
                    awsCommand: "cloudfront"
                    awsSubCommand: "create-invalidation"
                    awsArguments: '--distribution-id $(DistributionId) --paths "/*"'

trigger:
  branches:
    include:
      - master
      - develop

pr: none

variables:
  vmImageName: "ubuntu-latest"
  branchName: variables["Build.SourceBranchName"]
  targetEnvironment: iif(eq(variables["Build.SourceBranchName"], "master") ? "learn.plantanapp.com", "learn-dev.plantanapp.com")
  bucketName: $(targetEnvironment)
  regionName: "us-east-1"
  awsCredentials: "s3-learn.plantanapp.com"
  artifactFolderName: "doc"

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: NodeTool@0
            displayName: Install Node.js
            inputs:
              versionSpec: "20.x"

          - task: Npm@1
            displayName: Install packages
            inputs:
              command: "install"

          - task: Npm@1
            displayName: Build docusaurus
            inputs:
              command: "custom"
              customCommand: "run build"

          - task: CopyFiles@2
            displayName: Copy docusaurus files to $(Build.ArtifactStagingDirectory)
            inputs:
              SourceFolder: "build/"
              Contents: "**"
              TargetFolder: $(Build.ArtifactStagingDirectory)

          - task: PublishBuildArtifacts@1
            displayName: Publish build artifacts to $(artifactFolderName)
            inputs:
              PathtoPublish: $(Build.ArtifactStagingDirectory)
              ArtifactName: $(artifactFolderName)
              publishLocation: "Container"

  - stage: Deploy
    displayName: Deploy to S3
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: DeployArtifactsToS3
        displayName: Deploy artifacts to S3
        pool:
          vmImage: $(vmImageName)
        environment:
          name: 'docs'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AmazonWebServices.aws-vsts-tools.S3Upload.S3Upload@1
                  displayName: Upload artifacts to $(targetEnvironment) S3
                  inputs:
                    awsCredentials: $(awsCredentials)
                    regionName: "us-east-1"
                    bucketName: $(bucketName)
                    sourceFolder: "$(Pipeline.Workspace)/$(artifactFolderName)/"
                    globExpressions: "**"

                - task: AWSCLI@1
                  displayName: Invalidate CloudFront Cache
                  inputs:
                    awsCredentials: $(awsCredentials)
                    regionName: "us-east-1"
                    awsCommand: "cloudfront"
                    awsSubCommand: "create-invalidation"
                    awsArguments: '--distribution-id $(DistributionId) --paths "/*"'
